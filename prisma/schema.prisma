generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DataType {
  Data
  PDF
  Record
  Video
}

enum CategoryType {
  Data
  College
  Summary
  Questions
}

enum LectureType {
  Normal
  Practical
  FinalRevision
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  ASSIGN
  SEND
  SUBSCRIBE
}

// There's a hierarchy: RESTRICTED > ANY > OWN. Higher permission includes lower permission implicitly
enum PermissionScope {
  // These are for use with resources for which "ownership" makes sense (which are most resources)
  OWN
  ANY

  // These are for use with resources that have no "ownership", but can be "for the public" or "for the admins", for example
  RESTRICTED        // E.g., admin only. This is like ANY but stronger (naturally, if you have access to any resource, you also have access to restricted resources)
}

enum PermissionResource {
  // Users
  USER
  PERMISSION
  ROLE

  // Resources
  FACULTY
  YEAR
  MODULE
  SUBJECT
  LECTURE
  LINK
  QUIZ
  QUESTION

  // Notifications
  DEVICE
  NOTIFICATION
  TOPIC
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String
  city String

  creator   User? @relation(name: "FacultyCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?
  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()

  users User[] @relation(name: "UserFaculty")
  years StudyingYear[]
}

model User {
  id              Int              @id @default(autoincrement())
  googleSubId     String           @unique
  givenName       String
  familyName      String
  email           String
  picture         String
  role            Role             @relation(fields: [roleId], references: [id])
  roleId          Int              @default(1)

  facultyId       Int?
  yearId          Int?

  faculty         Faculty?         @relation(name: "UserFaculty", fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  year            StudyingYear?    @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  devices         Device[]

  createdAt       DateTime?        @default(now()) @db.Timestamp()
  updatedAt       DateTime?        @updatedAt @db.Timestamp()

  createdFaculties Faculty[]       @relation(name: "FacultyCreator")
  createdRoles      Role[]         @relation(name: "RoleCreator")
  createdYears      StudyingYear[] @relation(name: "YearCreator")
  createdModules    Module[]       @relation(name: "ModuleCreator")
  createdSubjects   Subject[]      @relation(name: "SubjectCreator")
  createdLectures   Lecture[]      @relation(name: "LectureCreator")
  createdLinks      LectureLink[]  @relation(name: "LinkCreator")
  createdQuizzes    Quiz[]         @relation(name: "QuizCreator")
  createdQuestions  Question[]     @relation(name: "QuestionCreator")
  createdTopics     Topic[]        @relation(name: "TopicCreator")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]

  creator   User? @relation(name: "RoleCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?
  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Permission {
  id          Int              @id @default(autoincrement())
  action      PermissionAction
  scope       PermissionScope
  resource    PermissionResource
  description String?
  roles       RolePermission[]

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()

  @@unique([action, scope, resource])
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  role         Role        @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       Int
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId Int

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()

  @@unique([roleId, permissionId])
}

model StudyingYear {
  id        Int       @id @default(autoincrement())
  title     String
  facultyId Int
  faculty   Faculty   @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  creator   User?      @relation(name: "YearCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
  modules   Module[]
  users     User[]
}

model Module {
  id           Int    @id @default(autoincrement())
  yearId       Int
  name         String
  semesterName Int    @default(1) @db.SmallInt
  icon         String

  year     StudyingYear @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  creator   User?   @relation(name: "ModuleCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?

  subjects Subject[]

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String
  icon String

  moduleId Int
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  creator   User? @relation(name: "SubjectCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?

  lectures Lecture[]

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Lecture {
  id        Int         @id @default(autoincrement())
  title     String
  subTitle  String?
  subjectId Int
  type      LectureType @default(Normal)
  subject   Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date      DateTime?   @db.Date

  creator   User? @relation(name: "LectureCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
  links     LectureLink[]
  quizzes   Quiz[]
}

model LectureLink {
  id          Int          @id @default(autoincrement())
  title       String
  subTitle    String?
  url         String
  type        DataType     @default(PDF)
  category    CategoryType @default(Data)
  lectureId   Int
  lectureData Lecture      @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notifiable  Boolean      @default(true)

  creator   User? @relation(name: "LinkCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Device {
  id        Int    @id @default(autoincrement())
  token     String @unique
  userId    Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  topics    DeviceTopic[]

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Topic {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  public      Boolean   @default(true)

  devices     DeviceTopic[]

  creator     User? @relation(name: "TopicCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId   Int?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model DeviceTopic {
  id        Int   @id @default(autoincrement())
  deviceId  Int   
  topicId   Int

  device    Device @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topic     Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([deviceId, topicId])
}

model Quiz {
  id          Int        @id @default(autoincrement())
  lectureId   Int
  lectureData Lecture    @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  questions   Question[]
  notifiable  Boolean      @default(true)

  creator   User? @relation(name: "QuizCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Question {
  id                 Int              @id @default(autoincrement())
  quizId             Int
  quiz               Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image              String?
  explanation        String?
  text               String
  options            String[]
  correctOptionIndex Int

  creator   User? @relation(name: "QuestionCreator", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorId Int?

  createdAt DateTime? @default(now()) @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}