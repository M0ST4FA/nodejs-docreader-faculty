generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_DEPLOY")
}

// DATABASE_URL
// DATABASE_DEPLOY

enum DataType {
  Data
  PDF
  Record
  Video
}

enum CategoryType {
  Data
  College
  Summary
}

enum LectureType {
  Normal
  Practical
  FinalRevision
}

enum UserRole {
  Admin
  User
  Editor
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String
  city String

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()

  users  User[]
  admins FacultyAdmin[]
  years  StudyingYear[]
}

model FacultyAdmin {
  id        Int    @id @default(autoincrement())
  name      String
  email     String @unique
  password  String
  facultyId Int

  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model User {
  id                Int                    @id @default(autoincrement())
  name              String
  email             String                 @unique
  password          String
  status            Boolean                @default(false)
  role              UserRole               @default(User)
  facultyId         Int
  yearId            Int                    @default(1)
  faculty           Faculty                @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  year              StudyingYear           @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  verificationCodes UserVerificationCode[]

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model UserVerificationCode {
  id     Int    @id @default(autoincrement())
  userId Int
  code   String
  plain  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @db.Timestamp()
  expiresIn DateTime? @db.Timestamp()
}

model StudyingYear {
  id        Int       @id @default(autoincrement())
  title     String
  facultyId Int
  faculty   Faculty   @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
  modules   Module[]
  users     User[]
}

model Module {
  id           Int    @id @default(autoincrement())
  yearId       Int
  name         String
  semesterName Int    @default(1) @db.SmallInt
  icon         String

  year     StudyingYear @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjects Subject[]

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String
  icon String

  moduleId Int
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  lectures      LectureData[]
  practical     PracticalData?
  finalRevision FinalRevisionData?

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model LectureData {
  id        Int       @id @default(autoincrement())
  title     String
  subTitle  String
  subjectId Int
  subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date      DateTime? @db.Timestamp()

  createdAt DateTime?      @db.Timestamp()
  updatedAt DateTime?      @updatedAt @db.Timestamp()
  links     LectureLinks[]
}

model PracticalData {
  id        Int              @id @default(autoincrement())
  title     String
  subTitle  String
  subjectId Int              @unique
  subject   Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  links     PracticalLinks[]
  createdAt DateTime?        @db.Timestamp()
  updatedAt DateTime?        @updatedAt @db.Timestamp()
}

model FinalRevisionData {
  id        Int                  @id @default(autoincrement())
  title     String
  subTitle  String
  subjectId Int                  @unique
  subject   Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  links     FinalRevisionLinks[]
  createdAt DateTime?            @db.Timestamp()
  updatedAt DateTime?            @updatedAt @db.Timestamp()
}

model LectureLinks {
  id          Int          @id @default(autoincrement())
  title       String
  subTitle    String
  url         String
  type        DataType     @default(PDF)
  category    CategoryType @default(Data)
  lectureId   Int
  lectureData LectureData  @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime?    @db.Timestamp()
  updatedAt   DateTime?    @updatedAt @db.Timestamp()
}

model PracticalLinks {
  id            Int           @id @default(autoincrement())
  title         String
  subTitle      String
  url           String
  type          DataType      @default(PDF)
  category      CategoryType  @default(Data)
  practicalId   Int
  practicalData PracticalData @relation(fields: [practicalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime?     @db.Timestamp()
  updatedAt     DateTime?     @updatedAt @db.Timestamp()
}

model FinalRevisionLinks {
  id              Int               @id @default(autoincrement())
  title           String
  subTitle        String
  url             String
  type            DataType          @default(PDF)
  category        CategoryType      @default(Data)
  finalRevisionId Int
  finalRevision   FinalRevisionData @relation(fields: [finalRevisionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime?         @db.Timestamp()
  updatedAt       DateTime?         @updatedAt @db.Timestamp()
}
