generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_DEPLOY2")
}

enum DataType {
  Data
  PDF
  Record
  Video
}

enum UserRole {
  Admin
  User
  Editor
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String
  city String

  users  User[]
  admins FacultyAdmin[]
  years  StudyingYear[]
}

model FacultyAdmin {
  id        Int    @id @default(autoincrement())
  name      String
  email     String @unique
  password  String
  facultyId Int

  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id                Int                    @id @default(autoincrement())
  name              String
  email             String                 @unique
  password          String
  status            Boolean                @default(false)
  role              UserRole               @default(User)
  facultyId         Int
  yearId            Int                    @default(1)
  faculty           Faculty                @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  year              StudyingYear           @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  verificationCodes UserVerificationCode[]
}

model UserVerificationCode {
  id     Int    @id @default(autoincrement())
  userId Int
  code   String
  plain  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model StudyingYear {
  id        Int     @id @default(autoincrement())
  title     String
  facultyId Int
  faculty   Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  modules Module[]
  users   User[]
}

model Module {
  id     Int    @id @default(autoincrement())
  yearId Int
  name   String
  icon   String

  year     StudyingYear    @relation(fields: [yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjects ModuleSubject[]
}

model ModuleSubject {
  id       Int    @id @default(autoincrement())
  moduleId Int
  name     String
  icon     String

  module         Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lectures       SubjectLecture[]
  practical      SubjectPractical[]
  finalRevisions SubjectFinalRevision[]
}

model DataCategory {
  id   Int    @id @default(autoincrement())
  name String
  icon String

  subjectLectures       SubjectLecture[]
  subjectPractical      SubjectPractical[]
  subjectFinalRevisions SubjectFinalRevision[]
}

model SubjectLecture {
  id         Int @id @default(autoincrement())
  subjectId  Int
  categoryId Int

  title       String
  description String
  url         String
  type        DataType @default(PDF)

  subject  ModuleSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category DataCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SubjectFinalRevision {
  id         Int @id @default(autoincrement())
  subjectId  Int
  categoryId Int

  title       String
  description String
  url         String
  type        DataType @default(PDF)

  subject  ModuleSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category DataCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SubjectPractical {
  id         Int @id @default(autoincrement())
  subjectId  Int
  categoryId Int

  title       String
  description String
  url         String
  x           String
  type        DataType @default(PDF)

  subject  ModuleSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category DataCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
