import z from 'zod';

const notificationSchema = z
  .object({
    notification: z
      .object(
        {
          title: z
            .string()
            .trim()
            .min(1, { message: 'Notification title is required.' })
            .optional(),
          body: z
            .string()
            .trim()
            .min(1, { message: 'Notification body is required.' })
            .optional(),
          imageUrl: z
            .string()
            .url({ message: 'Invalid notification image URL.' })
            .optional(),
        },
        { message: 'Notification field is required.' },
      )
      .strict(),
    data: z.object({}).default({}).optional(),
  })
  .strict();

const resourceSchema = z.object(
  {
    links: z
      .array(z.number({ message: "'links' must be an array of integers." }))
      .default([]),
    mcqQuizzes: z
      .array(z.number({ message: "'quizzes' must be an array of integers." }))
      .default([]),
    writtenQuizzes: z
      .array(
        z.number({
          message: "'practicalQuizzes' must be an array of integers.",
        }),
      )
      .default([]),
  },
  {
    message:
      "'notify' must be specified if notification type is 'autogenerated'.",
  },
);

const fullSchema = z
  .object({
    type: z.enum(['custom', 'autogenerated']),
    yearId: z.number().int({ message: "'yearId' must be an integer." }),
    notify: resourceSchema,
    ignore: resourceSchema,
    body: notificationSchema,
  })
  .superRefine((obj, ctx) => {
    if (obj.type === 'autogenerated' && obj.body !== undefined)
      return ctx.addIssue({
        code: 'custom',
        message:
          "Can't have a notification body if notification type is 'autogenerated'",
        path: ['body'],
      });

    if (
      obj.type === 'autogenerated' &&
      obj.notify === undefined &&
      obj.ignore === undefined
    )
      ctx.addIssue({
        code: 'custom',
        message:
          "At least one of 'notify' or 'ignore' must be specified if notification type is 'autogenerated'",
        path: ['notify', 'ignore'],
      });

    if (obj.type === 'autogenerated' && obj.yearId === undefined)
      ctx.addIssue({
        code: 'custom',
        message:
          "'yearId' must be specified if notification type is 'autogenerated'",
        path: ['yearId'],
      });
  });

export type NotificationSchemaType = z.infer<typeof fullSchema>;

export default fullSchema;
